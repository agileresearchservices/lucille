[
  {
    "className": "com.kmwllc.lucille.connector.FileConnector",
    "packageName": "com.kmwllc.lucille.connector",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [
      {
        "methodName": "execute",
        "parameterTypes": [
          "com.kmwllc.lucille.core.Publisher"
        ],
        "parameterNames": [
          "publisher"
        ]
      }
    ],
    "description": "Config parameters:\n  docIdPrefix (string, Optional): prefix to add to the docId when not handled by a file handler, defaults to empty string. To configure docIdPrefix for CSV, JSON or XML files, configure it in its respective file handler config in fileOptions\n  pathToStorage (string): path to storage, can be local file system or cloud bucket/container\n  e.g.\n    /path/to/storage/in/local/filesystem\n    gs://bucket-name/folder/\n    s3://bucket-name/folder/\n    https://accountName.blob.core.windows.net/containerName/prefix/\n  filterOptions (Map, Optional): configuration for \u003ci\u003ewhich\u003c/i\u003e files should/shouldn\u0027t be processed in your traversal. Example of filterOptions below.\n  fileOptions (Map, Optional): Options for \u003ci\u003ehow\u003c/i\u003e you handle/process certain types of files in your traversal. Example of fileOptions below.\n  gcp (Map, Optional): options for handling GoogleCloud files. See example below.\n  s3 (Map, Optional): options for handling S3 files. See example below.\n  azure (Map, Optional): options for handling Azure files. See example below.\n\n FilterOptions:\n  includes (list of strings, Optional): list of regex patterns to include files.\n  excludes (list of strings, Optional): list of regex patterns to exclude files.\n  modificationCutoff (Duration, Optional): Filter files that haven\u0027t been modified since a certain amount of time.\n  See the HOCON documentation for examples of a Duration - strings like \"1h\", \"2d\" and \"3s\" are accepted, for example.\n  Note that, for archive files, this cutoff applies to both the archive file itself and its individual contents.\n\n FileOptions:\n  getFileContent (boolean, Optional): option to fetch the file content or not, defaults to true. Setting this to false would speed up traversal significantly. Note that if you are traversing the cloud, setting this to true would download the file content. Ensure that you have enough resources if you expect file contents to be large.\n  handleArchivedFiles (boolean, Optional): whether to handle archived files or not, defaults to false. Recurring not supported. Note: If this is enabled while traversing the cloud, it will force to fetch the file contents of the compressed file before processing. The file path field of extracted file will be in the format of \"{path/to/archive/archive.zip}:{extractedFileName}\" unless handled by fileHandler in which in that case will follow the id creation of that fileHandler\n  handleCompressedFiles (boolean, Optional): whether to handle compressed files or not, defaults to false. Recurring not supported.Note: If this is enabled while traversing the cloud, it will force to fetch the file contents of the compressed file before processing.The file path field of decompressed file will be in the format of \"{path/to/compressed/compressedFileName.gz}:{compressedFileName}\" unless handled by fileHandler in which in that case will follow the id creation of that fileHandler\n  moveToAfterProcessing (string, Optional): path to move files to after processing, currently only supported for local file system\n  moveToErrorFolder (string, Optional): path to move files to if an error occurs during processing, currently only supported for local file system\n  csv (Map, Optional): csv config options for handling csv type files. Config will be passed to CSVFileHandler\n  json (Map, Optional): json config options for handling json/jsonl type files. Config will be passed to JsonFileHandler\n  xml (Map, Optional): xml config options for handling xml type files. Config will be passed to XMLFileHandler\n\n \u003cbr\u003e gcp:\n \"pathToServiceKey\" : \"path/To/Service/Key.json\"\n \"maxNumOfPages\" : number of references of the files loaded into memory in a single fetch request. Optional, defaults to 100\n\n \u003cbr\u003e s3:\n \"accessKeyId\" : s3 key id. Not needed if secretAccessKey is not specified (using default credentials).\n \"secretAccessKey\" : secret access key. Not needed if accessKeyId is not specified (using default credentials).\n \"region\" : s3 storage region\n \"maxNumOfPages\" : number of references of the files loaded into memory in a single fetch request. Optional, defaults to 100\n\n \u003cbr\u003e azure:\n \"connectionString\" : azure connection string\n \u003cb\u003eOr\u003c/b\u003e\n \"accountName\" : azure account name\n \"accountKey\" : azure account key\n \"maxNumOfPages\" : number of references of the files loaded into memory in a single fetch request. Optional, defaults to 100",
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.JSONConnector",
    "packageName": "com.kmwllc.lucille.connector",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [
      {
        "methodName": "execute",
        "parameterTypes": [
          "com.kmwllc.lucille.core.Publisher"
        ],
        "parameterNames": [
          "publisher"
        ]
      }
    ],
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.SolrConnector",
    "packageName": "com.kmwllc.lucille.connector",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [
      {
        "methodName": "preExecute",
        "parameterTypes": [
          "java.lang.String"
        ],
        "parameterNames": [
          "runId"
        ]
      },
      {
        "methodName": "execute",
        "parameterTypes": [
          "com.kmwllc.lucille.core.Publisher"
        ],
        "parameterNames": [
          "publisher"
        ]
      },
      {
        "methodName": "postExecute",
        "parameterTypes": [
          "java.lang.String"
        ],
        "parameterNames": [
          "runId"
        ]
      },
      {
        "methodName": "close",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "getLastExecutedPreActions",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "getLastExecutedPostActions",
        "parameterTypes": [],
        "parameterNames": []
      }
    ],
    "description": "Connector for issuing requests to Solr. Requests should be formatted as JSON Strings and can contain\n the {runId} wildcard, which will be substituted for the current runId before the requests are issued.\n This is the only wildcard supported. XML can be used instead of JSON with the useXml\u003dtrue parameter.\n\n Connector Parameters:\n\n   - preActions (List\u0026lt;String\u0026gt;, Optional) : A list of requests to be issued to Solr. These actions will be performed first.\n   - postActions (List\u0026lt;String\u0026gt;, Optional) : A list of requests to be issued to Solr. These actions will be performed second.\n   - solr.url (String) : The url of the Solr instance for this Connector to issue its requests to.\n   - useXml (boolean, Optional) : indicates whether actions are in xml or json format; defaults to json; note that\n     Solr does more validation on json commands than xml ones (e.g. it rejects unrecognized JSON commands but\n     accepts unrecognized XML commands and reports success); therefore, json is preferable",
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.AbstractConnector",
    "packageName": "com.kmwllc.lucille.connector",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [
      {
        "methodName": "getName",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "getPipelineName",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "requiresCollapsingPublisher",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "postExecute",
        "parameterTypes": [
          "java.lang.String"
        ],
        "parameterNames": [
          "runId"
        ]
      },
      {
        "methodName": "preExecute",
        "parameterTypes": [
          "java.lang.String"
        ],
        "parameterNames": [
          "runId"
        ]
      },
      {
        "methodName": "close",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "getDocIdPrefix",
        "parameterTypes": [],
        "parameterNames": [],
        "description": "Returns the configured prefix that this Connector will prepend to ids from the source\n data when creating Documents from that data."
      },
      {
        "methodName": "createDocId",
        "parameterTypes": [
          "java.lang.String"
        ],
        "parameterNames": [
          "id"
        ],
        "description": "Creates an extended doc ID by adding a prefix (and possibly in the future, a suffix) to the\n given id."
      },
      {
        "methodName": "getMessage",
        "parameterTypes": [],
        "parameterNames": []
      }
    ],
    "description": "Base class for use by Connector implementations, providing basic Config parsing behavior\n for obtaining connector name, pipeline name, doc ID prefix, and collapsing mode.\n\n All Connectors will have their configuration validated by {@link Spec#validate(Config, String)}. In the Connector\u0027s constructor,\n define the required/optional properties/parents via a ConnectorSpec. Validation errors will mention the connector\u0027s name.\n A {@link Spec#connector()} always has \"name\", \"class\", \"pipeline\", \"docIdPrefix\", and \"collapse\" as legal properties.",
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.CSVConnector",
    "packageName": "com.kmwllc.lucille.connector",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [
      {
        "methodName": "execute",
        "parameterTypes": [
          "com.kmwllc.lucille.core.Publisher"
        ],
        "parameterNames": [
          "publisher"
        ]
      },
      {
        "methodName": "toString",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "createProcessedAndErrorFoldersIfSet",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "moveFile",
        "parameterTypes": [
          "java.nio.file.Path",
          "java.lang.String"
        ],
        "parameterNames": [
          "absolutePath",
          "option"
        ]
      }
    ],
    "description": "Connector implementation that produces documents from the rows in a given CSV file.",
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.SequenceConnector",
    "packageName": "com.kmwllc.lucille.connector",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [
      {
        "methodName": "execute",
        "parameterTypes": [
          "com.kmwllc.lucille.core.Publisher"
        ],
        "parameterNames": [
          "publisher"
        ]
      }
    ],
    "description": "Connector implementation that produces blank documents given amount to produce",
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.jdbc.DatabaseConnector",
    "packageName": "com.kmwllc.lucille.connector.jdbc",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [
      {
        "methodName": "execute",
        "parameterTypes": [
          "com.kmwllc.lucille.core.Publisher"
        ],
        "parameterNames": [
          "publisher"
        ]
      },
      {
        "methodName": "stop",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "close",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "isClosed",
        "parameterTypes": [],
        "parameterNames": []
      }
    ],
    "description": "Database Connector - This connector can run a select statement and return the rows\n from the database as documents which are published to a topic for processing.\n If \"otherSQLs\" are set, the sql and otherSQLs must all be ordered by their join key\n and the otherJoinFields must be populated.  If those parameters are populated\n this connector will run the otherSQL statements in parallel and flatten the rows from\n the otherSQL statements onto the Document as a child document\n \u003cp\u003e\n Note: currently this connector with otherSQL statements only supports integers as a\n join key.\n\n Config Parameters:\n - driver (String) : Driver used for creating a connection to database\n - connectionString (String) : used for establishing a connection to the right database\n - jdbcUser (String) : username to access database\n - jdbcPassword (String) : password to access database\n - sql (String) : SQL statement to query the database.\n - idField (String) : column name used for id in the database\n - fetchSize (Integer, Optional): returns the desired resultSet size if set\n - preSQL (String, Optional): SQL statement that returns nothing. Performed before sql is executed.\n    e.g. INSERT, DELETE, UPDATE, SQL DDL statement.\n - postSQL (String, Optional): SQL statement that returns nothing. Performed after sql is executed.\n    e.g. INSERT, DELETE, UPDATE, SQL DDL statement.\n - otherSQLs (List\u0026lt;String\u0026gt;, Optional): list of SQL statements to query and retrieve another result set of size fetchSize if set.\n    For joining result sets.\n - otherJoinFields (String, Optional, required if otherSQL is provided) : join field used for other result sets retrieved from otherSQLs\n - ignoreColumns (List\u0026lt;String\u0026gt;, Optional) : list of columns to ignore when populating Lucille document from sql result set.\n - connectionRetries (Integer, Optional) : number of retries allowed to connect to database, defaults to 1\n - connectionRetryPause (Integer, Optional) : duration of pause between retries in milliseconds, defaults to 10000 or 10 seconds\n\n @author kwatters",
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.jdbc.ConnectorState",
    "packageName": "com.kmwllc.lucille.connector.jdbc",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [
      {
        "methodName": "values",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "valueOf",
        "parameterTypes": [
          "java.lang.String"
        ],
        "parameterNames": [
          "name"
        ]
      }
    ],
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.storageclient.LocalStorageClient",
    "packageName": "com.kmwllc.lucille.connector.storageclient",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [],
    "description": "A storage client for the local file system. Needs no configuration.",
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.storageclient.LocalStorageClient.LocalFileVisitor",
    "packageName": "com.kmwllc.lucille.connector.storageclient.LocalStorageClient",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [
      {
        "methodName": "preVisitDirectory",
        "parameterTypes": [
          "java.nio.file.Path",
          "java.nio.file.attribute.BasicFileAttributes"
        ],
        "parameterNames": [
          "dir",
          "attrs"
        ]
      },
      {
        "methodName": "visitFile",
        "parameterTypes": [
          "java.nio.file.Path",
          "java.nio.file.attribute.BasicFileAttributes"
        ],
        "parameterNames": [
          "file",
          "attrs"
        ]
      },
      {
        "methodName": "visitFileFailed",
        "parameterTypes": [
          "java.nio.file.Path",
          "java.io.IOException"
        ],
        "parameterNames": [
          "file",
          "exc"
        ]
      },
      {
        "methodName": "postVisitDirectory",
        "parameterTypes": [
          "java.nio.file.Path",
          "java.io.IOException"
        ],
        "parameterNames": [
          "dir",
          "exc"
        ]
      }
    ],
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.storageclient.AzureStorageClient",
    "packageName": "com.kmwllc.lucille.connector.storageclient",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [],
    "description": "A storage client for Microsoft Azure. Create using a configuration (commonly mapped to \u003cb\u003eazure\u003c/b\u003e) which contains either\n \"connectionString\" \u003ci\u003eor\u003c/i\u003e contains both \"accountName\" and \"accountKey\".",
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.storageclient.S3StorageClient",
    "packageName": "com.kmwllc.lucille.connector.storageclient",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [],
    "description": "A storage client for S3. Create using a configuration (commonly mapped to \u003cb\u003es3\u003c/b\u003e) which can contain\n \"region\" and can contain \u003cb\u003eboth\u003c/b\u003e \"accessKeyId\" and \"secretAccessKey\".",
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.storageclient.BaseFileReference",
    "packageName": "com.kmwllc.lucille.connector.storageclient",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [
      {
        "methodName": "getLastModified",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "getFileExtension",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "asDoc",
        "parameterTypes": [
          "com.kmwllc.lucille.connector.storageclient.TraversalParams"
        ],
        "parameterNames": [
          "params"
        ]
      },
      {
        "methodName": "decompressedFileAsDoc",
        "parameterTypes": [
          "java.io.InputStream",
          "java.lang.String",
          "com.kmwllc.lucille.connector.storageclient.TraversalParams"
        ],
        "parameterNames": [
          "in",
          "decompressedFullPathStr",
          "params"
        ]
      }
    ],
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.storageclient.GoogleStorageClient",
    "packageName": "com.kmwllc.lucille.connector.storageclient",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [],
    "description": "A storage client for Google Cloud. Create using a configuration (commonly mapped to \u003cb\u003egcp\u003c/b\u003e) which contains \"pathToServiceKey\".",
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.storageclient.BaseStorageClient",
    "packageName": "com.kmwllc.lucille.connector.storageclient",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [
      {
        "methodName": "init",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "shutdown",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "isInitialized",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "traverse",
        "parameterTypes": [
          "com.kmwllc.lucille.core.Publisher",
          "com.kmwllc.lucille.connector.storageclient.TraversalParams"
        ],
        "parameterNames": [
          "publisher",
          "params"
        ]
      },
      {
        "methodName": "getFileContentStream",
        "parameterTypes": [
          "java.net.URI"
        ],
        "parameterNames": [
          "uri"
        ]
      }
    ],
    "description": "The base implementation for StorageClients. Must be initialized before traversal / getting a file\u0027s contents using\n {@link BaseStorageClient#init()}. Call {@link BaseStorageClient#traverse(Publisher, TraversalParams)} to process and publish\n Documents. Call {@link BaseStorageClient#getFileContentStream(URI)} to get the contents of a single file at the given URI.",
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.storageclient.TraversalParams",
    "packageName": "com.kmwllc.lucille.connector.storageclient",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [
      {
        "methodName": "includeFile",
        "parameterTypes": [
          "java.lang.String",
          "java.time.Instant"
        ],
        "parameterNames": [
          "fileName",
          "fileLastModified"
        ],
        "description": "Returns whether the filterOptions allow for the publishing / processing of the file, described by its name\n and the last time it was modified."
      },
      {
        "methodName": "supportedFileType",
        "parameterTypes": [
          "java.lang.String"
        ],
        "parameterNames": [
          "fileExtension"
        ],
        "description": "Returns whether a file with the given extension is supported, as per these TraversalParams. Handles the nuance\n of json supporting jsonl and vice versa."
      },
      {
        "methodName": "getURI",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "getDocIdPrefix",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "getFileOptions",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "shouldGetFileContent",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "getHandleArchivedFiles",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "getHandleCompressedFiles",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "getMoveToAfterProcessing",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "getMoveToErrorFolder",
        "parameterTypes": [],
        "parameterNames": []
      }
    ],
    "description": "The arguments / parameters associated with a traversal on a StorageClient.",
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.xml.XMLConnector",
    "packageName": "com.kmwllc.lucille.connector.xml",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [
      {
        "methodName": "execute",
        "parameterTypes": [
          "com.kmwllc.lucille.core.Publisher"
        ],
        "parameterNames": [
          "publisher"
        ]
      }
    ],
    "description": "Connector implementation that produces documents from a given XML file.\n Config Parameters:\n \u003cul\u003e\n \u003cli\u003efilePaths (List\u0026lt;String\u0026gt;): The list of file paths to parse through.\u003c/li\u003e\n \u003cli\u003exmlRootPath (String): The path to the XML chunk to separate as a document.\u003c/li\u003e\n \u003cli\u003exmlIdPath (String): The path to the id for each document.\u003c/li\u003e\n \u003cli\u003eurlFiles (List\u0026lt;String\u0026gt;): The list of URL file paths to parse. If specified along with filePaths, urlFiles takes precedence.\u003c/li\u003e\n \u003cli\u003eencoding (String): The encoding of the XML document to parse: defaults to utf-8.\u003c/li\u003e\n \u003cli\u003eoutputField (String): The field to place the XML into: defaults to \"xml\".\u003c/li\u003e\n \u003c/ul\u003e",
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.xml.RecordingInputStream",
    "packageName": "com.kmwllc.lucille.connector.xml",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [
      {
        "methodName": "read",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "read",
        "parameterTypes": [
          "byte[]",
          "int",
          "int"
        ],
        "parameterNames": [
          "buf",
          "off",
          "len"
        ]
      },
      {
        "methodName": "read",
        "parameterTypes": [
          "byte[]"
        ],
        "parameterNames": [
          "buf"
        ]
      },
      {
        "methodName": "skip",
        "parameterTypes": [
          "long"
        ],
        "parameterNames": [
          "len"
        ]
      },
      {
        "methodName": "clearUpTo",
        "parameterTypes": [
          "java.lang.String"
        ],
        "parameterNames": [
          "string"
        ]
      },
      {
        "methodName": "returnUpTo",
        "parameterTypes": [
          "java.lang.String"
        ],
        "parameterNames": [
          "string"
        ]
      },
      {
        "methodName": "setEncoding",
        "parameterTypes": [
          "java.lang.String"
        ],
        "parameterNames": [
          "encoding"
        ]
      }
    ],
    "isConfigClass": false
  },
  {
    "className": "com.kmwllc.lucille.connector.xml.ChunkingXMLHandler",
    "packageName": "com.kmwllc.lucille.connector.xml",
    "interfaceNames": [],
    "isAbstract": false,
    "methods": [
      {
        "methodName": "setDocumentLocator",
        "parameterTypes": [
          "org.xml.sax.Locator"
        ],
        "parameterNames": [
          "locator"
        ]
      },
      {
        "methodName": "startDocument",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "endDocument",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "startPrefixMapping",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String"
        ],
        "parameterNames": [
          "prefix",
          "uri"
        ]
      },
      {
        "methodName": "endPrefixMapping",
        "parameterTypes": [
          "java.lang.String"
        ],
        "parameterNames": [
          "prefix"
        ]
      },
      {
        "methodName": "startElement",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String",
          "java.lang.String",
          "org.xml.sax.Attributes"
        ],
        "parameterNames": [
          "uri",
          "localName",
          "qName",
          "atts"
        ]
      },
      {
        "methodName": "endElement",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String",
          "java.lang.String"
        ],
        "parameterNames": [
          "uri",
          "localName",
          "qName"
        ]
      },
      {
        "methodName": "characters",
        "parameterTypes": [
          "char[]",
          "int",
          "int"
        ],
        "parameterNames": [
          "ch",
          "start",
          "length"
        ]
      },
      {
        "methodName": "ignorableWhitespace",
        "parameterTypes": [
          "char[]",
          "int",
          "int"
        ],
        "parameterNames": [
          "ch",
          "start",
          "length"
        ]
      },
      {
        "methodName": "processingInstruction",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String"
        ],
        "parameterNames": [
          "target",
          "data"
        ]
      },
      {
        "methodName": "skippedEntity",
        "parameterTypes": [
          "java.lang.String"
        ],
        "parameterNames": [
          "name"
        ]
      },
      {
        "methodName": "setDocumentRootPath",
        "parameterTypes": [
          "java.lang.String"
        ],
        "parameterNames": [
          "documentRootPath"
        ]
      },
      {
        "methodName": "setDocumentIDPath",
        "parameterTypes": [
          "java.lang.String"
        ],
        "parameterNames": [
          "documentIDPath"
        ]
      },
      {
        "methodName": "getDocIDPrefix",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "setDocIDPrefix",
        "parameterTypes": [
          "java.lang.String"
        ],
        "parameterNames": [
          "docIDPrefix"
        ]
      },
      {
        "methodName": "setConnector",
        "parameterTypes": [
          "com.kmwllc.lucille.connector.AbstractConnector"
        ],
        "parameterNames": [
          "connector"
        ]
      },
      {
        "methodName": "getRis",
        "parameterTypes": [],
        "parameterNames": []
      },
      {
        "methodName": "setRis",
        "parameterTypes": [
          "com.kmwllc.lucille.connector.xml.RecordingInputStream"
        ],
        "parameterNames": [
          "ris"
        ]
      },
      {
        "methodName": "setPublisher",
        "parameterTypes": [
          "com.kmwllc.lucille.core.Publisher"
        ],
        "parameterNames": [
          "publisher"
        ]
      },
      {
        "methodName": "setOutputField",
        "parameterTypes": [
          "java.lang.String"
        ],
        "parameterNames": [
          "outputField"
        ]
      }
    ],
    "isConfigClass": false
  }
]