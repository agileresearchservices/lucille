package com.kmwllc.lucille.core;

import com.typesafe.config.Config;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.UUID;

/**
 * Invokes one or more Connectors in sequence, only starting the next Connector once all the work
 * generated by the previous Connector is fully complete.
 *
 */
public class RunnerImpl implements Runner {

  private static final Logger log = LoggerFactory.getLogger(RunnerImpl.class);

  private final String runId;
  private final Config config;

  public static void main(String[] args) throws Exception {
    //MessageManagerFactory.getInstance().setLocalMode();
    new RunnerImpl().runConnectors(true);
  }

  public RunnerImpl() throws Exception {
    this(ConfigAccessor.loadConfig());
  }

  public RunnerImpl(Config config) throws Exception {
    this.config = config;
    // generate a unique ID for this run
    this.runId = UUID.randomUUID().toString();
    log.info("runId=" + runId);
  }

  @Override
  public String getRunId() {
    return runId;
  }

  @Override
  public void runConnectors(boolean startWorkerAndIndexer) throws Exception {

    Worker worker = null;
    Indexer indexer = null;

    if (startWorkerAndIndexer) {
      indexer = new Indexer(config);
      worker = new Worker(config);
      Thread workerThread = new Thread(worker);
      Thread indexerThread = new Thread(indexer);
      indexerThread.start();
      workerThread.start();
    }

    List<Connector> connectors = Connector.fromConfig(config);

    // run all the connectors in sequence, only starting the next connector once all the work
    // generated by the previous connector has been completed
    for (Connector connector : connectors) {
      runConnector(connector);
    }

    if (indexer!=null) {
      indexer.terminate();
    }

    if (worker!=null) {
      worker.terminate();
    }

  }

  @Override
  public void runConnector(Connector connector) throws Exception {
    log.info("Running connector: " + connector.toString());

    Publisher publisher = new PublisherImpl(runId);

    Thread connectorThread = new Thread(new Runnable() {
      @Override
      public void run() {
        connector.start(publisher);
      }
    });
    connectorThread.start(); // TODO: what if it didn't start properly?

    publisher.waitForCompletion(connectorThread);

    publisher.close();

    log.info("Work complete");
  }

}
